                ########################## 串口 打开参数  1 端口  2buadrate 3 bytesize  4parity  5sotpbits 6 timeout

                elif meter == 'HB BT/ET' and self.aw.qmc.device != 115:
                    self.aw.qmc.device = 115
                    #self.aw.ser.comport = "COM11"
                    self.aw.ser.baudrate = 9600
                    self.aw.ser.bytesize = 8
                    self.aw.ser.parity= 'N'
                    self.aw.ser.stopbits = 1
                    self.aw.ser.timeout = 0.8
                    message = QApplication.translate('Message','Device set to {0}. Now, choose serial port').format(meter)






 def ARDUINOTC4temperature(self,chan=None):
        try:
            #### lock shared resources #####
            self.COMsemaphore.acquire(1)
            command = ''
            res = ''
            result = ''
            t1,t2 = 0.,0.
            if not self.SP.isOpen():
                self.openport()
                #libtime.sleep(1)
                #Reinitialize Arduino in case communication was interrupted
                self.ArduinoIsInitialized = 0
            if self.SP.isOpen():
                #INITIALIZE (ONLY ONCE)
                if not self.ArduinoIsInitialized or chan is not None:
                    self.SP.reset_input_buffer()
                    self.SP.reset_output_buffer()
                    #build initialization command
                    if chan is None:
                        et_channel = self.arduinoETChannel
                        if et_channel == 'None':
                            et_channel = '0'
                        bt_channel = self.arduinoBTChannel
                        if bt_channel == 'None':
                            bt_channel = '0'
                        #If extra device +ArduinoTC4_XX present. read all 4 Ts
                        if 28 in self.aw.qmc.extradevices: # +ArduinoTC4_34
                            vals = ['1','2','3','4']
                            try:
                                if self.arduinoETChannel and self.arduinoETChannel != 'None' and self.arduinoETChannel in vals:
                                    vals.pop(vals.index(self.arduinoETChannel))
                                if self.arduinoBTChannel and self.arduinoBTChannel != 'None' and self.arduinoBTChannel in vals:
                                    vals.pop(vals.index(self.arduinoBTChannel))
                            except Exception: # pylint: disable=broad-except
                                pass
                            command = 'CHAN;' + et_channel + bt_channel + vals[0] + vals[1]
                        else:
                        #no extra device +ArduinoTC4_XX present. reads ambient T, ET, BT
                            command = 'CHAN;' + et_channel + bt_channel + '00'
                    else:
                        command = f'CHAN;{chan}'
                        self.ArduinoIsInitialized = 1
                    #libtime.sleep(0.3)
                    self.SP.write(str2cmd(command + '\n'))       #send command
                    self.SP.flush()
                    libtime.sleep(.1)
                    result = self.SP.readline().decode('utf-8')[:-2]  #read
                    if (not len(result) == 0 and not result.startswith('#')):
                        raise Exception(QApplication.translate('Error Message','Arduino could not set channels',None))

                    if self.aw.seriallogflag:
                        settings = str(self.comport) + ',' + str(self.baudrate) + ',' + str(self.bytesize)+ ',' + str(self.parity) + ',' + str(self.stopbits) + ',' + str(self.timeout)
                        self.aw.addserial('ArduinoTC4: ' + settings + ' || Tx = ' + str(command) + ' || Rx = ' + str(result))

                        #OK. NOW SET FILTER
                        self.SP.reset_input_buffer()
                        self.SP.reset_output_buffer()
                        filt =  ','.join(map(str,self.aw.ser.ArduinoFILT))
                        command = 'FILT;' + filt + '\n'   #Set filters
                        self.SP.write(str2cmd(command))
                        result = self.SP.readline().decode('utf-8')[:-2]
                        if (not len(result) == 0 and not result.startswith('#')):
                            raise Exception(QApplication.translate('Error Message','Arduino could not set filters',None))
                        ### EVERYTHING OK  ###
                        self.ArduinoIsInitialized = 1
                        self.aw.sendmessage(QApplication.translate('Message','TC4 initialized',None))
                #READ TEMPERATURE
                command = 'READ\n'  #Read command.
                self.SP.reset_input_buffer()
                self.SP.reset_output_buffer()
                self.SP.write(str2cmd(command))
                self.SP.flush()
                libtime.sleep(.1)
                rl = self.SP.readline().decode('utf-8', 'ignore')[:-2]
                res = rl.rsplit(',')












############################################################################
    def openport(self):
        try:
            self.confport()
            self.ArduinoIsInitialized = 0  # Assume the Arduino has to be reinitialized
            #open port
            if not self.SP.isOpen():
                self.SP.open()
                if self.aw.seriallogflag:
                    settings = str(self.comport) + ',' + str(self.baudrate) + ',' + str(self.bytesize)+ ',' + str(self.parity) + ',' + str(self.stopbits) + ',' + str(self.timeout)
                    self.aw.addserial('serial port opened: ' + settings)
                libtime.sleep(.2) # avoid possible hickups on startup
        except Exception: # pylint: disable=broad-except
#            import traceback
#            traceback.print_exc(file=sys.stdout)
            self.SP.close()
            libtime.sleep(0.7) # on OS X opening a serial port too fast after closing the port gets disabled
            error = QApplication.translate('Error Message','Serial Exception:') + ' ' + QApplication.translate('Error Message','Unable to open serial port')
            self.aw.qmc.adderror(error)




TC4  arduino 输出
11:15:18.379 ArduinoTC4: /dev/cu.usbmodem00001,115200,8,N,1,0.8 || Tx = READ || Rx = ['-0.1', '-0.1', '-0.1', '0', '0', '0']|| Ts= -0.10, -0.10, -1.00, -1.00, -1.00, -1.005 
11:15:18.186 ArduinoTC4: /dev/cu.usbmodem00001,115200,8,N,1,0.8 || Tx = READ || Rx = ['-0.1', '-0.1', '-0.1', '0', '0', '0']|| Ts= -0.10, -0.10, -1.00, -1.00, -1.00, -1.004 
11:15:16.380 ArduinoTC4: /dev/cu.usbmodem00001,115200,8,N,1,0.8 || Tx = CHAN;1300 || Rx = # Active channels set to 1300 
11:15:14.290 ArduinoTC4: /dev/cu.usbmodem00001,115200,8,N,1,0.8 || Tx = READ || Rx = ['']|| Ts= -1.00, -1.00, -1.00, -1.00, -1.00, -1.002
11:15:13.388 ArduinoTC4: /dev/cu.usbmodem00001,115200,8,N,1,0.8 || Tx = CHAN;1300 || Rx = 1 
11:15:12.285 serial port opened: /dev/cu.usbmodem00001,115200,8,N,1,0.8